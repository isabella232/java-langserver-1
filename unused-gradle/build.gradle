/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'aaron' at '11/29/16 2:36 PM' with Gradle 3.2.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.2.1/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    }}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'com.github.johnrengelman.shadow'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()

    // for the copied vscode-javac stuff
    mavenLocal() // TODO: vendorize the Sun Tools jars
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compile 'org.slf4j:slf4j-api:1.7.22'
    compile 'ch.qos.logback:logback-classic:1.1.8'
    compile 'io.reactivex.rxjava2:rxjava:2.0.1'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.0'

    // Gonna need this someday
    // compile 'org.apache.maven.plugins:maven-dependency-plugin:3.0.0'

    // for the copied vscode-javac stuff
    compile 'com.sun:tools:1.8'
    compile 'com.google.guava:guava:18.0'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

jar {
    manifest {
        attributes 'Main-Class': 'com.sourcegraph.javalangserver.Application'
    }
}
